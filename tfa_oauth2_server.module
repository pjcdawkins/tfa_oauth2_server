<?php
/**
 * @file
 * TFA OAuth2 Server module.
 */

/**
 * Implements hook_oauth2_server_token().
 */
function tfa_oauth2_server_oauth2_server_token(OAuth2Server $server, OAuth2\Request $request, OAuth2\Response $response) {
  // Only act for the password credentials grant type.
  if ($request->request('grant_type') !== 'password') {
    return;
  }

  // Ignore failed password credentials requests. OAuth2 Server will throw the
  // correct error in that case.
  if ($response->getStatusCode() != 200) {
    return;
  }

  // Load the account from the request parameters.
  $account = user_load_by_name($request->request('username'));
  if (!$account) {
    $account = user_load_by_mail($request->request('username'));
  }
  if (!$account) {
    watchdog('tfa_oauth2_server', 'Failed to identify account', array(), WATCHDOG_ERROR);
    return;
  }

  // Return early if user has successfully gone through TFA process or if
  // a login plugin specifically allows it.
  if (tfa_login_allowed($account)) {
    return;
  }

  $tfa = tfa_get_process($account);
  // Check if TFA has been set up by the account.
  $require_tfa = $tfa->ready();

  // Allow other modules to act on login when account is not set up for TFA.
  if (empty($require_tfa)) {
    $require_tfa = array_filter(module_invoke_all('tfa_ready_require', $account));
  }

  // Ignore accounts that don't have TFA set up.
  if (empty($require_tfa)) {
    return;
  }

  // Get TFA information about the account.
  $context = $tfa->getContext();

  // Log an error if there are no validate plugins.
  if (empty($context['plugins']['validate'])) {
    watchdog('tfa_oauth2_server', 'No validation plugin enabled for account @uid', array('@uid' => $account->uid), WATCHDOG_ERROR);
  }

  // Process a provided TOTP code.
  if ($request->headers('X_Drupal_TFA') !== NULL
    && isset($context['plugins']['validate'])
    && $context['plugins']['validate'] === 'tfa_basic_totp') {
    $tfa->begin();

    // Check flood tables.
    $identifier = variable_get('user_failed_login_identifier_uid_only', FALSE) ? $account->uid : $account->uid . '-' . ip_address();
    $user_window = variable_get('tfa_user_window', 900);
    if (!flood_is_allowed('tfa_user', variable_get('tfa_user_threshold', 6), $user_window, $identifier)) {
      module_invoke_all('tfa_flood_hit', $tfa->getContext());
      tfa_oauth2_server_error(array(
        t('You have reached the threshold for incorrect code entry attempts. Please try again in !time minutes.', array('!time' => round($user_window / 60))
      )));
      return;
    }

    // Fake a TFA form to check the authorization code.
    $form = array();
    $form_state = array();
    $form_state['values']['code'] = $request->headers('X_Drupal_TFA');
    $tfa->validateForm($form, $form_state);
    $errors = $tfa->getErrorMessages();

    // Success. Clear the TFA flood level for the user.
    if (empty($errors)) {
      flood_clear_event('tfa_user', $identifier);

      return NULL;
    }
    else {
      // Failure. Register a flood event.
      flood_register_event('tfa_user', variable_get('tfa_user_window', 900), $identifier);
      tfa_oauth2_server_error($errors);
      return;
    }

  }

  tfa_oauth2_server_error(array(t('Two-factor authentication is required.')));
}

/**
 * Send an error message in JSON.
 *
 * @param array $messages
 * @param string $error
 * @param string $status
 */
function tfa_oauth2_server_error(array $messages = array(), $error = 'access_denied', $status = '403 Forbidden') {
  drupal_add_http_header('status', $status);
  drupal_add_http_header('X-Drupal-TFA', 'required, type=totp');

  $response_array = array(
    'error' => $error,
  );
  if (!empty($messages)) {
    $response_array['error_description'] = implode(' ', $messages);
  }
  if (isset($_REQUEST['state'])) {
    $response_array['state'] = $_REQUEST['state'];
  }

  drupal_json_output($response_array);
  drupal_exit();
}
